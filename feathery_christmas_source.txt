######################################
#  Adventuron                        #
######################################

game_information {
   game_name                    = Feathery Christmas
   game_version                 = 1.0.2
   game_shortname               = Feathery Xmas
   written_by                   = OK Feather
   uuid                         = b9293521-1ddf-48d0-9798-705e902858f9
   year_of_release              = 2020
   short_synopsis               = Help Father Christmas deliver gifts without your reindeer and save Christmas!
}

themes {
  theme_base : theme {
      colors {
         exit_list_item_pen = #fdd
      }
      lister_exits {
         is_list_enter = true
      }
  }
  theme_mono : theme {
      theme_settings {
         font = daad
      }
   }
}

######################################
#  Game Settings                     #
######################################

game_settings {
   auto_ask_sound_permissions = false
   enable_standard_all_behaviour = false
}


loading_screen = loading_screen
redescribe = auto_beta

start_at = santa_cellar

vocabulary {
   : verb / aliases = [examine, check, regarde]
   : verb / aliases = [give, show]
   : verb / aliases = [up, upstair, upstairs]
   : verb / aliases = [down, downstair, downstairs]
   : verb / aliases = [talk, say, speak, tell]
   : verb / aliases = [comment, comments, note, notes]
   : verb / aliases = [exchange, exchanging]
   : verb / aliases = [exit, leave, outside, out]
   : verb / aliases = [enter, inside, in]
   : verb / aliases = [ring,strike]
   : verb / aliases = [thank, thanks]
   : verb / aliases = [merry, happy, feliz, joyous, feathery, great, joyeux, enjoy, warmest, jolly, cheerful]
   : verb / aliases = [kill,threaten,menace,intimidate,browbeat,bully,scare,frighten,terrorize,murder,assassinate,beat,fight,combat,hurt,kick,harm,injure,insult]
   : verb / aliases = ["cry", ":(","=(", "='(", ":'("]
   : verb / aliases = ["smile", "grin", "laugh", ":)","=)",":D","=D"]
   : noun      / aliases = [bread, croissant, pain, cookie, loaf]
   : noun      / aliases = [cafe, coocoo, shop, restaurant]
   : noun      / aliases = [guide, tour, tourguide]
   : noun      / aliases = [owner, vendor]
   : noun      / aliases = [pigeon, bird, dove]
   : noun      / aliases = [potion, beverage, drink, barrel]
   : noun      / aliases = [reindeer]
   : noun      / aliases = [tourist, visitor]
   : noun      / aliases = [yourself, santa, myself, me]
   : noun      / aliases = [dictionary, dico, dic, dict]
   : noun      / aliases = [bin, compost, trashcan, garbage, trash]
   : noun      / aliases = [bible, scripture]
   : noun      / aliases = [book]
   : noun      / aliases = [child, children, kid]
   : noun      / aliases = [montauk, beach]
   : noun      / aliases = [ellacombe, apparatus]
   : noun      / aliases = [comment, comments, note, notes]
   : noun      / aliases = [bird, dove]
   : noun      / aliases = [christmas, hanukkah, kwanzaa, greetings, holidays, noel, noël, navidad, wishes, yuletide]
   : noun      / aliases = [fight,combat,conflict]
}

######################################
#  Variables                         #
######################################

booleans {
   has_food_fight : boolean "false";
   in_labyrinth : boolean "false";
   hard_mode : boolean "false";
   is_north_open : boolean "false";
   can_leave_church : boolean "true";
   has_good_hope  : boolean "false";
   is_playing_logic  : boolean "false";
   keep_same_logic : boolean "false";
   is_sound_muted : boolean "true";
   music_ever_enabled : boolean "false";
   help_about_commands : boolean "false";
   has_lifetime_cafe_pass : boolean "false";
   gave_wrong_answer_lying : boolean "false";
}

collections {
   labyrinth_dir : list {
      items  = [ "start", "n", "ns", "se", "nse", "nss", "nsen", "nsene", "nsenee", "nses", "nsesn", "nsesnn", "s", "se", "see", "win" ]
   }
   lying_choice1: list {
      items = [
         "{lying_man1}: {lying_man2} got bread",
         "{lying_woman1}: {lying_woman2} and I got bread",
         "{lying_man2}: I didn't get bread",
         "{lying_woman2}: {lying_man3} didn't get bread",
         "{lying_man3}: Both {lying_man1} and {lying_woman2} got bread"
      ]
   }
   lying_choice4 : list {
      items = [
         "{lying_person1}: I ate bread",
         "{lying_person2}: {lying_person3} or I didn't get bread",
         "{lying_person3}: {lying_person1} or {lying_person4} didn't get bread",
         "{lying_person4}: {lying_person3} and {lying_person5} got bread",
         "{lying_person5}: {lying_person4} got bread"
      ]
   }
   lying_choice6 : list {
      items = [
         "{lying_man1}: {lying_woman2} is telling the truth",
         "{lying_woman1}: {lying_man2} is lying",
         "{lying_man2}: {lying_man3} is lying",
         "{lying_woman2}: At least one out of {lying_woman1} and me are telling the truth",
         "{lying_man3}: {lying_man1} is lying"
      ]
   }
   lying_choice8 : list {
      items = [
         "{lying_person6}-{lying_person4}-{lying_person1}-{lying_person3}-{lying_person2}-{lying_person5}-{lying_person7}",
         "{lying_person2}-{lying_person7}-{lying_person6}-{lying_person4}-{lying_person5}-{lying_person1}-{lying_person3}",
         "{lying_person1}-{lying_person2}-{lying_person3}-{lying_person4}-{lying_person5}-{lying_person6}-{lying_person7}",
         "{lying_person1}-{lying_person3}-{lying_person7}-{lying_person4}-{lying_person6}-{lying_person2}-{lying_person5}",
         "{lying_person1}-{lying_person2}-{lying_person5}-{lying_person4}-{lying_person6}-{lying_person7}-{lying_person3}"
      ]
   }
   lying_choice9 : list {
      items = [
         "{lying_person1} : Each of the five of us ate bread",
         "{lying_person2} : {lying_person1} ate the least bread or only one pigeon ate less bread than him",
         "{lying_person3} : There is only one pigeon who ate as much bread as me. And it is not {lying_person5}",
         "{lying_person4} : I am the only one who ate the least bread",
         "{lying_person5} : There is only one pigeon who ate the most bread, but sadly it's not me…"
      ]
   }
   lying_choices: list {
      items = [lying_choice1, lying_choice1, lying_choice1, lying_choice4, lying_choice4, lying_choice6, lying_choice6, lying_choice8, lying_choice9]
   }
   lying_response1 : list {
      items = [
         "Sorry, {lying_man1} was the wrong choice{!hard_mode ? ` : it would mean {lying_man2}, {lying_woman2} and {lying_man3} lied but there are only 2 liars`} :(",
         "Sorry, {lying_woman1} was the wrong choice{!hard_mode ? ` : it would mean she, {lying_man2} and {lying_man3} lied but there are only 2 liars`} :(",
         "You won, well done! {lying_man2} is given the remaining bread and all pigeons are now well-fed! {!hard_mode ? ` ({lying_man1} and {lying_woman2} were lying)`}",
         "Sorry, {lying_woman2} was the wrong choice{!hard_mode ? `  : it would mean she, {lying_woman1} and {lying_man2} lied but there are only 2 liars`} :("
         "Sorry, {lying_man3} was the wrong choice{!hard_mode ? `  : it would mean only {lying_man2} lied but there are 2 liars`} :("
      ]
   }
   lying_response2 : list {
      items = [
         "You won, well done! With the lie spotted, we can amply feed the poor hungry pigeon!",
         "Sorry, {lying_woman1} was the wrong choice :(",
         "Sorry, {lying_man2} was the wrong choice :(",
         "Sorry, {lying_woman2} was the wrong choice :("
         "Sorry, {lying_man3} was the wrong choice :("
      ]
   }
   lying_response3 : list {
      items = [
         "Sorry, {lying_man1} was the wrong choice :(",
         "Sorry, {lying_woman1} was the wrong choice :(",
         "Sorry, {lying_man2} was the wrong choice :(",
         "You won, well done! With the lie spotted, we can amply feed the poor hungry pigeon!",
         "Sorry, {lying_man3} was the wrong choice :("
      ]
   }
   lying_response4 : list {
      items = [
         "Sorry, {lying_person1} was the wrong choice :(",
         "You won, well done! {lying_person2} is given the remaining bread and all pigeons are now well-fed!",
         "Sorry, {lying_person3} was the wrong choice :(",
         "Sorry, {lying_person4} was the wrong choice :("
         "Sorry, {lying_person5} was the wrong choice :("
      ]
   }
   lying_response5 : list {
      items = [
         "Sorry, {lying_person1} was the wrong choice :(",
         "Sorry, {lying_person2} was the wrong choice :(",
         "You won, well done! With the lie spotted, we can amply feed the poor hungry pigeon!",
         "Sorry, {lying_person4} was the wrong choice :("
         "Sorry, {lying_person5} was the wrong choice :("
      ]
   }
   lying_response6 : list {
      items = [
         "Sorry, {lying_man1} was the wrong choice :(",
         "Sorry, {lying_woman1} was the wrong choice :(",
         "Sorry, {lying_man2} was the wrong choice :(",
         "Sorry, {lying_woman2} was the wrong choice :("
         "You won, well done! With the lie spotted, we can amply feed the poor hungry pigeon!",
      ]
   }
   lying_response7 : list {
      items = [
         "Sorry, {lying_man1} was the wrong choice :(",
         "You won, well done! With the lie spotted, we can amply feed the poor hungry pigeon!",
         "Sorry, {lying_man2} was the wrong choice :(",
         "Sorry, {lying_woman2} was the wrong choice :("
         "Sorry, {lying_man3} was the wrong choice :("
      ]
   }
   lying_response8 : list {
      items = [
         "Sorry, this was not the correct order :(",
         "Sorry, this was not the correct order :(",
         "You won, well done! Now every pigeon can be well-fed!",
         "Sorry, this was not the correct order :(",
         "Sorry, this was not the correct order :("
      ]
   }
   lying_response9 : list {
      items = [
         "Sorry, this was not the correct order :(",
         "Yes, you are correct! {lying_person2} ate the most bread. Now we can feed the remaining bread based on your findings. So all pigeons are now well-fed!",
         "Sorry, this was not the correct order :(",
         "Sorry, this was not the correct order :(",
         "Sorry, this was not the correct order :("
      ]
   }
   lying_responses: list {
      items = [lying_response1, lying_response2, lying_response3, lying_response4, lying_response5, lying_response6, lying_response7, lying_response8, lying_response9]
   }
   lying_introductions: list {
      items = [
         "One of the pigeons did not get any bread!! Two are liars!\n",
         "One of the pigeons did not get any bread!! Two are liars!\n",
         "One of the pigeons did not get any bread!! Two are liars!\n",
         "One of the pigeons did not get any bread!! One is a liar!\n",
         "One of the pigeons did not get any bread!! One is a liar!\n",
         "Some of these pigeons did not get any bread!! Two are liars!\n",
         "Some of these pigeons did not get any bread!! Two are liars!\n",
         "Pigeons are lining up in order of weight (from light to heavy). Consider the below conditions.\n-There is only one pigeon who is heavier than {lying_person6}.\n-{lying_person7} is heavier than {lying_person5}, and {lying_person5} is heavier than {lying_person3}.\n-There are two pigeons between {lying_person6} and {lying_person3}.\n-There is no pigeon who is lighter than {lying_person1}.\n-{lying_person4} is standing in the middle.\n",
         "Every pigeon is telling the truth.",
      ]
   }
   lying_queries: list {
      items = [
         "Who didn't get any bread?",
         "Who is a lying male pigeon?",
         "Who is a lying female pigeon?",
         "Who didn't get any bread?",
         "Who is a liar?",
         "Who is a lying male pigeon?",
         "Who is a lying female pigeon?",
         "What is the correct order?",
         "Who ate the most bread?"
      ]
   }
   lying_men: list {items = [Andrew,Charlie,Eric,Jamie,Keith,Gabe,Steve,George,Felix,Dan,Chris,Woolliam,Sterling,Larry]}
   lying_women: list {items = [Barbara,Darla,Alice,Dova,Gigi,Fiona,Faye,Ena,Amaia,Saya,Columbia,Ara,Ava,Rosella,Columbia,Aya]}
   lying_people: list {items = [Yuri,Jay,Coco,Taylor,Shannon,Jun,Robin,Xue,Merle]}
   lying_solutions: list {
      items = [2, 0, 3, 1, 2, 4, 1, 2, 1]
   }
   lying_character_order: list {
      items = [0, 1, 2, 3, 4]
   }
}

integers {
   day_spend_labyrinth_enigma : integer "0";
   labyrinth_position_x : integer "0";
   labyrinth_position_y : integer "28";
   pitch_random : integer "0";
   integer_tmp : integer "0";
   lying_solution: integer "0";
   lying_form: integer "0";
}

strings {
   answer_logic : string "";
   next_track : string "";
   current_track : string "";
   sound_volume : string "normal";
   string_tmp : string "";
   comments : string "";
   nothing_message : string "";
   lying_man1 : string "";
   lying_man2 : string "";
   lying_man3 : string "";
   lying_woman1 : string "";
   lying_woman2 : string "";
   lying_person1 : string "";
   lying_person2 : string "";
   lying_person3 : string "";
   lying_person4 : string "";
   lying_person5 : string "";
   lying_person6 : string "";
   lying_person7 : string "";

   message_church_inside_gang : string "You hear lots of beautiful noises coming from {hard_mode?`upstairs`:`<upstairs<#fdd>>. We should go <up<#fdd>> and check if the pigeons have really come.`}";
}

######################################
#  Locations                         #
######################################

locations {

   bookshop : location "You are in front of the book shop and see the <owner<#fee>> outside. <Talk<#fee>> to the <owner<#fee>> if you need a <book<#fee>>." ;

   church : location "You are in front of the <church<#fee>>. You can access the <tower<#fee>> upstairs if you <enter<#fdd>>." ;

   church_inside : location "You are inside the <church<#fee>>. You remember having heard that a secret bell combination would result in all nearby <pigeons<#fee>> being reunited at the <tower<#fee>>. Enter <RING<#fdd>> NUMBER (e.g. <RING 0<#fdd>>) to try calling <pigeons<#fee>>." ;

   church_tower : location "You are in the church's <tower<#fee>>." ;

   coocoo_cafe : location "You are at the famous <Coocoo<#fee>> <Cafe<#fee>>, where there is always a variety of <pigeons<#fee>> on the <roof<#fee>>." ;

   coocoo_inside : location "You are inside the <Coocoo<#fee>> <Cafe<#fee>>. There are no customers." ;

   delivery : location "Before your eyes, you see all the pigeons dispatching the gifts before them. After a calm pause, they all start taking flight: in one instant, there are as many pigeons as stars in the sky; carrying their glittering gifts! All thanks to your optimized route!" ;

   montauk_beach : location "<Montauk<#fee>> is the place where <lovers<#fee>> like to meet." ;

   nicobar_park : location "You are in Nicobar Park." ;

   labyrinth_start : location "<Pigeons<#fee>> are going to give gifts to all children!\nThey just need you to help organize the delivery.\nFind the {hard_mode ? `longest path so carriers can avoid it and` : `shortest path to`} get there before Christmas!{!hard_mode ? ` May the eastward wind push you and make you save distance!`}" ;

   room_tree : location "You are in front of a big Christmas tree, you see that Larry's friend Columbia safely delivered a lot of the presents." ;

   santa_cellar : location "This is <Santa<#fee>>'s <cellar<#fee>>, where you can normally find different <potions<#fee>> to stay cheerful and full of energy. You remember having told the <reindeer<#fee>> of these <drinks<#fee>>' benefits, so that's probably why they've been drinking a lot. However, they don't seem full of energy. You decide to leave the <cellar<#fee>> to get fresh air." ;

   south_park : location "You are in the South of Nicobar Park." ;

   labyrinth_n: location "";
   labyrinth_ns: location "";
   labyrinth_nse: location "";
   labyrinth_nsen: location "";
   labyrinth_nsene: location "";
   labyrinth_nsenee: location "{!hard_mode ? `Hint: You are on the path for next year's Christmas`}";
   labyrinth_nses: location "";
   labyrinth_nsesn: location "";
   labyrinth_nsesnn: location "";
   labyrinth_nss: location "";
   labyrinth_s: location "";
   labyrinth_se: location "";
   labyrinth_see: location "{!hard_mode ? `Hint: south slowed you like a sloth...`}";
   labyrinth_win: location "You arrived at the end! Congratulations!";
}

######################################
#  Connections                       #
######################################

connections {

   from, direction, to = [
   santa_cellar, leave_oneway, nicobar_park,
   nicobar_park, north, montauk_beach,
   nicobar_park, west, coocoo_cafe,
   nicobar_park, south, south_park,
   coocoo_cafe, south, bookshop,
   coocoo_cafe, enter, coocoo_inside,
   bookshop, east, south_park,
   south_park, south, church,
   church, enter, church_inside,
   church_inside, up, church_tower,
   montauk_beach, north_oneway, labyrinth_start,

   labyrinth_start, north_oneway, labyrinth_n,
   labyrinth_n, south_oneway, labyrinth_ns,
   labyrinth_ns, east_oneway, labyrinth_nse,
   labyrinth_nse, north_oneway, labyrinth_nsen,
   labyrinth_nsen, east_oneway, labyrinth_nsene,
   labyrinth_nsene, east_oneway, labyrinth_nsenee,
   labyrinth_nse, south_oneway, labyrinth_nses,
   labyrinth_nses, north_oneway, labyrinth_nsesn,
   labyrinth_ns, south_oneway, labyrinth_nss,
   labyrinth_nss, east_oneway, labyrinth_see,
   labyrinth_start, south_oneway, labyrinth_s,
   labyrinth_s, east_oneway, labyrinth_se,
   labyrinth_se, east_oneway, labyrinth_see,
   labyrinth_see, north_oneway, labyrinth_nse,
   labyrinth_nsesn, east_oneway, labyrinth_win,
   labyrinth_nsesn, north_oneway, labyrinth_nsesnn,
   labyrinth_nsesnn, east_oneway, labyrinth_nsenee,
   labyrinth_nsenee, south_oneway, labyrinth_win,

   labyrinth_start, leave_oneway, montauk_beach,
   labyrinth_n, leave_oneway, montauk_beach,
   labyrinth_ns, leave_oneway, montauk_beach,
   labyrinth_nse, leave_oneway, montauk_beach,
   labyrinth_nsen, leave_oneway, montauk_beach,
   labyrinth_nsene, leave_oneway, montauk_beach,
   labyrinth_nses, leave_oneway, montauk_beach,
   labyrinth_nss, leave_oneway, montauk_beach,
   labyrinth_s, leave_oneway, montauk_beach,
   labyrinth_se, leave_oneway, montauk_beach,
   labyrinth_see, leave_oneway, montauk_beach,
   labyrinth_nsesn, leave_oneway, montauk_beach,
   labyrinth_nsesnn, leave_oneway, montauk_beach,
   labyrinth_nsenee, leave_oneway, montauk_beach
   ]

}

######################################
#  Objects                           #
######################################

objects {

bin : scenery "a beautiful Art Deco {hard_mode?`bin`:`<bin<#fee>>`}" at = "coocoo_cafe";

bookshop_owner : scenery "the <bookshop<#fee>> <owner<#fee>>" at = "bookshop";

bread : object "a generous loaf of <bread<#fee>> and other goodies";

church_ticket : object "a <ticket<#fee>> to visit the church" ;

dictionary : object "a Korean-English <dictionary<#fee>>" ;

full_bin : scenery "a beautiful Art Deco {hard_mode?`bin`:`<bin<#fee>> that seems too full`}";

larry : scenery "<Larry<#fee>>, the leader of the pack of <pigeons<#fee>>" at = "montauk_beach";

helping_larry : scenery "<Larry<#fee>> flying" ;

morehelping_larry : scenery "<Larry<#fee>>, who is ready to go <north<#fee>> with his crowd of friends." ;

nicobar_man1 : scenery "a {hard_mode?`man`:`<man<#fee>>`} thinking by himself" at = "south_park"  ;

nicobar_man2 : scenery "a <man<#fee>> thinking by himself" ;

flying_pigeon : scenery "a <pigeon<#fee>>" at = "nicobar_park";

new_pigeon : scenery "another <pigeon<#fee>>";

tourist : scenery "a <tourist<#fee>>" at = "church_inside";

absent_pigeon : scenery "no <birds<#fee>>" at = "church_tower" ;

gang_pigeon : scenery "that the biggest group of <pigeons<#fee>> you've ever seen in your entire life is gathered here" ;

map : object "a {hard_mode?`map`:`<map<#fdd>>`} of the village" at = "santa_cellar";

pigeon_book : object "a {hard_mode?`book`:`<book<#fee>>`} on the floor \'Pigeons love bread\'" at = "nicobar_park" ;

pigeon_booklove : object "a {hard_mode?`book`:`<book<#fee>>`} \'Pigeons love bread\'";

pigeon_bookreal : object "the real bible about pigeons \'Lovey Dovey Pigeons\'" ;

robin : scenery "some kids, like Robin, happily screaming \'I can't wait to play Call Of Beauty!\' With your help, the pigeons could deliver the gifts to all children" at = "room_tree" ;

happy_tourist : scenery "a <tourist<#fee>>" ;

unpaid_tourguide : scenery "the <tour<#fee>> <guide<#fee>> for the <church<#fee>> and its <tower<#fee>>" at = "church" ;

friendly_tourguide : scenery "the tour guide for the <church<#fee>> and its <tower<#fee>>" ;

waitress : scenery "a {hard_mode?`waitress from Coocoo Cafe`:`<waitress<#fee>> from <Coocoo<#fee>> <Cafe<#fee>>`}. She looks very tired" at = "coocoo_inside" ;

grateful_waitress : scenery "The <Coocoo<#fee>> <Cafe<#fee>> team is grateful for your help. You got rid of all extra <bread<#fee>>, <cookies<#fee>> and <croissants<#fee>>...  But where? The store is closing, you should go outside" ;

}

######################################
#  Barriers                          #
######################################

barriers {
   block_cafe : block_path {
      from = coocoo_cafe
      to = coocoo_inside
      message  = The restaurant is closed.
      block_when_exists = grateful_waitress

   }

   block_larry : block_path {
      from = montauk_beach
      to = labyrinth_start
      message  = The path is blocked by Larry.
      block_when_exists = larry
      show_blocked_exit = true

   }

   block_helpinglarry : block_path {
      from = montauk_beach
      to = labyrinth_start
      message  = We will only take that path once all pigeons are assembled and ready.
      block_when_not = is_north_open
      show_blocked_exit = true

   }

   block_leave_tower : block_path {
      from = church_inside
      to = church
      message  = There are crowds of birds everywhere, I should check the tower <up<#fee>> before getting out.
      block_when_not = can_leave_church
      show_blocked_exit = true
   }

   block_tourguide : block_path {

      from = church
      to = church_inside
      message  = The path is blocked by the tour guide.
      block_when_exists = unpaid_tourguide
      show_blocked_exit = true

   }

   block_tourguide2 : block_path {
      from = church
      to = church_inside
      message  = The path is blocked by the tour guide.
      block_when_not_carried = church_ticket
      show_blocked_exit = true
   }

   block_church : block_path {
      from = south_park
      to = church
      message  = The road to the church is currently covered in snow. Someone is clearing it from afar, but you cannot access it yet.
      block_when_exists = larry
      show_blocked_exit = true

   }

}

######################################
#  On Startup                        #
######################################

on_startup {
   : collection_union collection_1 = "lying_men" collection_2 ="lying_people" result = "lying_people"  ;
   : collection_union collection_1 = "lying_women" collection_2 ="lying_people" result = "lying_people"  ;
   : collection_iterate "labyrinth_dir" {
       : set_graphic {
         graphic -> ("labyrinth")
         target -> ("labyrinth_" + item())
       }
   }
   : if (!sysvar_bool "sysvar_has_asked_sound") {
      : print "Feathery Christmas uses background music.\n\nYou can lower the volume or stop the music at any moment using <SOUND LOWEST<#fdd>> or <SOUND OFF<#fdd>>.\n\nDo you wish to enable the music?\n";
      : gosub "set_sound_on";
      : if (!sysvar_bool "sysvar_music_enabled") {
         : print "You can enable the music at any moment with <SOUND ON<#fdd>>.";
         : press_any_key;
      }
      : clear_screen;
   }
   : else_if (sysvar_bool "sysvar_music_enabled") {
      : set_true "music_ever_enabled";
      : if (sysvar_bool "sysvar_sound_enabled") {
         : set_false "is_sound_muted";
         : print "You can lower or stop the sound at any moment with <SOUND LOWEST<#fdd>> or <SOUND OFF<#fdd>>.\n";
         : press_any_key;
      }
      : else {
         : print "Feathery Christmas uses background music. You can enable the music at any moment with <SOUND ON<#fdd>> or <SOUND LOWEST<#fdd>> for lower volume.\n";
         : press_any_key;
      }
   }
   : gosub "update_volume";
   : play_music "music_intro";
   : print "Type <VERB NOUN<#fdd>> with the keyboard to advance in the game." ;
   : print "e.g. <EXAMINE PIGEON<#fdd>> (or <X<#fdd>>) to take a closer look at a PIGEON." ;
   : print "<GET BREAD<#fdd>> to take BREAD and add it to your inventory." ;
   : press_any_key ;
   : print "To travel, type <NORTH<#fdd>>, <EAST<#fdd>>, <SOUTH<#fdd>>, <WEST<#fdd>> (or <N<#fdd>>, <E<#fdd>>, <S<#fdd>>, <W<#fdd>>), <ENTER<#fdd>>, <EXIT<#fdd>>, <UP<#fdd>>, <DOWN<#fdd>>." ;
   : press_any_key ;
   : print "To check your inventory, type <INVENTORY<#fdd>> (or <I<#fdd>>)." ;
   : press_any_key ;
   : print "You start in easy mode. If you are a text-adventure veteran, you can switch to <HARD<#fdd>> mode (less textual hints, harder puzzles). You can switch at any time by typing <EASY<#fdd>> or <HARD<#fdd>>.";
   : press_any_key ;
   : print "To see available commands at a location, type <HELP<#fdd>>." ;
   : press_any_key ;

}

######################################
#  Subroutines                       #
######################################

subroutines {
   labyrinth_right : subroutine {
      : set_integer var = "labyrinth_position_x" {( labyrinth_position_x + 22)};
      : update_graphic;
      : pause "50";
   }
   set_sound_on : subroutine {
      : if (!sysvar_bool "sysvar_sound_enabled") {
         : ask_permission ask_again_and_again = "true" category = "sound" ;
      }
      : if (sysvar_bool "sysvar_sound_enabled" && !sysvar_bool "sysvar_music_enabled") {
            : ask_permission ask_again_and_again = "true" category = "music" ;
      }
      : if (sysvar_bool "sysvar_music_enabled") {
         : set_false "is_sound_muted";
         : gosub "update_volume";
         : set_true "music_ever_enabled";
      }
   }
   random_music : subroutine {
      : if (is_sound_muted) {
         : return;
      }
      : store_random var = "pitch_random";
      : if (pitch_random < 20) {
        :  beep millis="200" pitch="30";
      }
      : else_if (pitch_random < 40) {
        :  beep millis="200" pitch="33";
      }
      : else_if (pitch_random < 60) {
        :  beep millis="200" pitch="36";
      }
      : else_if (pitch_random < 80) {
        :  beep millis="200" pitch="39";
      }
      : else {
        :  beep millis="200" pitch="42";
      }
   }
   play_music : subroutine {
      : if (is_sound_muted) {
         : return;
      }
      : if (is_at "santa_cellar") {
         : set_string var="next_track" text="music_cellar";
         : if (next_track != current_track) {
            : play_music "music_cellar";
         }
      }
      : else_if (is_at "nicobar_park" || is_at "church" || is_at "south_park" || is_at "coocoo_cafe") {
         : set_string var="next_track" text="music_calm";
         : if (next_track != current_track) {
            : if (chance(50)) {
               : play_music "music_calm1";
            }
            : else {
               : play_music "music_calm2";
            }
         }
      }
      : else_if (is_at "coocoo_inside") {
         : set_string var="next_track" text="music_cafe";
         : if (next_track != current_track) {
            : play_music "music_cafe";
         }
      }
      : else_if (is_at "room_tree") {
         : set_string var="next_track" text="music_victory";
         : if (next_track != current_track) {
            : play_music "music_victory";
         }
      }
      : else_if (is_at "bookshop") {
         : set_string var="next_track" text="music_bookshop";
         : if (next_track != current_track) {
            : play_music "music_bookshop";
         }
      }
      : else_if (is_at "church_inside" || is_at "church_tower") {
         : set_string var="next_track" text="music_church";
         : if (next_track != current_track) {
            : play_music "music_church";
         }
      }
      : else_if (is_at "montauk_beach") {
         : set_string var="next_track" text="music_beach";
         : if (next_track != current_track) {
            : play_music "music_beach";
         }
      }
      : else_if (in_labyrinth) {
         : set_string var="next_track" text="music_labyrinth";
         : if (next_track != current_track) {
            : play_music "music_labyrinth";
         }
      }
      : else_if (is_at "delivery") {
         : set_string var="next_track" text="music_delivery";
         : if (next_track != current_track) {
            : play_music "music_delivery";
         }
      }
      : set_string var="current_track" {(next_track)}
   }
   update_volume : subroutine {
      : if (is_sound_muted) {
         : set_music_vol volume="0";
      }
      : else_if (sound_volume == "lowest") {
         : set_music_vol volume="3";
      }
      : else_if (sound_volume == "low") {
         : set_music_vol volume="7";
      }
      : else_if (sound_volume == "normal") {
         : set_music_vol volume="16";
      }
      : else_if (sound_volume == "high") {
         : set_music_vol volume="40";
      }
      : else_if (sound_volume == "highest") {
         : set_music_vol volume="100";
      }
   }
   play_lying_puzzle_choice : subroutine {
      : set_integer var="integer_tmp" {(
         int(collection_get { collection="lying_character_order" index -> (integer_tmp)})
      )}
      : set_string var="string_tmp" {(
         collection_get { collection -> (collection_get { collection="lying_responses" index -> (lying_form)}) index -> (integer_tmp)}
      )}
      : print "{string_tmp}";
      : if (lying_solution == integer_tmp) {
         : if (!is_playing_logic) {
            : destroy "larry";
            : create "helping_larry" ;
            : set_false "has_food_fight";
         }
      }
   }
   play_lying_puzzle_next_response_line :  subroutine {
      : set_integer var="integer_tmp" {(
         int(collection_get { collection="lying_character_order" index -> (integer_tmp)})
      )}
      : set_string var="string_tmp" {(
         collection_get { collection -> (collection_get { collection="lying_choices" index -> (lying_form)}) index -> (integer_tmp)}
      )}
   }
   play_lying_puzzle : subroutine {
      : if (hard_mode && !keep_same_logic) {
         : set_integer var="lying_form" {(random((collection_count "lying_choices") - 1))}
      }
      : else_if (!keep_same_logic) {
         : set_integer var="lying_form" value="0";
      }
      : print {(collection_get { collection="lying_introductions" index -> (lying_form)})}
      : if (hard_mode && !keep_same_logic) {
         : collection_sort collection="lying_character_order" algorithm="shuffle";
         : collection_sort collection="lying_men" algorithm="shuffle";
         : collection_sort collection="lying_women" algorithm="shuffle";
         : collection_sort collection="lying_people" algorithm="shuffle";
      }
      : set_string var="lying_man1" {(collection_get { collection="lying_men" index -> (0)} )};
      : set_string var="lying_man2" {(collection_get { collection="lying_men" index -> (1)} )};
      : set_string var="lying_man3" {(collection_get { collection="lying_men" index -> (2)} )};
      : set_string var="lying_woman1" {(collection_get { collection="lying_women" index -> (0)} )};
      : set_string var="lying_woman2" {(collection_get { collection="lying_women" index -> (1)} )};
      : set_string var="lying_person1" {(collection_get { collection="lying_people" index -> (0)} )};
      : set_string var="lying_person2" {(collection_get { collection="lying_people" index -> (1)} )};
      : set_string var="lying_person3" {(collection_get { collection="lying_people" index -> (2)} )};
      : set_string var="lying_person4" {(collection_get { collection="lying_people" index -> (3)} )};
      : set_string var="lying_person5" {(collection_get { collection="lying_people" index -> (4)} )};
      : set_string var="lying_person6" {(collection_get { collection="lying_people" index -> (5)} )};
      : set_string var="lying_person7" {(collection_get { collection="lying_people" index -> (6)} )};
      : set_integer var="lying_solution" {(int(collection_get { collection="lying_solutions" index -> (lying_form)}))}
      : set_integer var="integer_tmp" value="0";
      : gosub "play_lying_puzzle_next_response_line";
      : add_choice  "{string_tmp}" {
         : set_integer var="integer_tmp" value="0";
         : gosub  "play_lying_puzzle_choice" ;
      }
      : set_integer var="integer_tmp" value="1";
      : gosub mask = "true"  "play_lying_puzzle_next_response_line";
      : add_choice  "{string_tmp}" {
         : set_integer var="integer_tmp" value="1";
         : gosub "play_lying_puzzle_choice";
      }
      : set_integer var="integer_tmp" value="2";
      : gosub "play_lying_puzzle_next_response_line";
      : add_choice "{string_tmp}" {
         : set_integer var="integer_tmp" value="2";
         : gosub "play_lying_puzzle_choice";
      }
      : set_integer var="integer_tmp" value="3";
      : gosub "play_lying_puzzle_next_response_line";
      : add_choice "{string_tmp}" {
         : set_integer var="integer_tmp" value="3";
         : gosub "play_lying_puzzle_choice";
      }
      : set_integer var="integer_tmp" value="4";
      : gosub "play_lying_puzzle_next_response_line";
      : add_choice "{string_tmp}" {
         : set_integer var="integer_tmp" value="4";
         : gosub "play_lying_puzzle_choice";
      }
      : set_string var="string_tmp"  {(collection_get { collection="lying_queries" index -> (lying_form)})};
      : choose "{string_tmp}" hint="numeric_list_always" ;
   }
}

######################################
#  On Describe                       #
######################################

on_describe {
   : gosub "play_music";
   : if (is_present "unpaid_tourguide") {
      : print "The <guide<#fee>> says, \"Do you have an entrance {hard_mode?`ticket`:`<ticket<#fee>>`}? Only those with a {hard_mode?`ticket`:`<ticket<#fee>>`} can access.\"." ;
   }

   : if (is_present "larry" && !has_food_fight) {
      : print "<Larry<#fee>> says, \"I'm glad you met me in <Montauk<#fee>>. I hope you've not come empty-handed.\"." ;
   }


   : if (is_at "room_tree" ) {
      : print "CONGRATULATIONS!" ;
      : print "YOU WON THE GAME!" ;
      : print "LARRY AND HIS TROOPS COULD DELIVER ALL PRESENTS!" ;
      : print "TO THANK THEM, YOU PROMISED TO COME BACK AND GIVE THEM VINTAGE \'THE NOTORIOUS GROUSE\' DRINK, WITH SOME PANETTONE AND CASTELLA." ;
      : print "THANKS TO YOU, ALL KIDS AROUND THE WORLD WILL BE HAPPY ON CHRISTMAS!";
      : press_any_key ;
      : clear_screen;
      : stop_music;
      : win_game ;
   }
   : if (is_at "santa_cellar") {
       : if (is_first_entered()) {
         : press_any_key ;
       }
       : print "Christmas is coming tonight, everyone cannot wait to open <presents<#fee>>." ;
       : print "With this setback, how will you find a way to send all <presents<#fee>> in time for the big day?" ;
       : if (is_first_entered()) {
         : press_any_key ;
       }
       : print "Let's find a way to save Christmas!" ;
       : print "Try some commands, e.g. <EXAMINE REINDEER<#fee>>, <GET POTION<#fee>>, <TALK RUDOLPH<#fee>>. If you are stuck, type <HELP<#fee>>." ;
       : if (is_first_entered()) {
         : press_any_key ;
       }
   }
   : if (is_at "nicobar_park") {
      : if (has_good_hope) {
         : print "You are having more hope about saving Christmas.";
      }
      : else_if (is_first_entered()) {
         : print "You think sadly at the thought that all <children<#fee>> will think they were bad this year and didn't deserve a <present<#fee>>.";
      }

   }
   : if (is_at "coocoo_cafe" ) {
       : if (is_exists "full_bin") {
            : print "The <shop<#fee>> is closed! Where did the leftover <bread<#fee>> and <croissants<#fee>> go?";
       }
       : else_if (is_exists "grateful_waitress") {
            : print "The <shop<#fee>> is closed!";
       }
   }
   : if (is_at "montauk_beach" ) {
      : set_false "in_labyrinth";
      : if (has_food_fight) {
         : print "\"Whomp! Coo! Coocoo! Coo!\" There is a {hard_mode ? `fight`:`<fight<#fee>>`} about sharing the {hard_mode ? `bread`:`<bread<#fee>>`}.  It seems everyone did not receive the same quantity.";
      }
      : if (is_exists "helping_larry") {
         : print "Before leaving, Larry said that he was going to the church tower to gather the troops with a secret code.";
      }
      : if (is_north_open) {
         : print "There are a lot of pigeons around. It seems everything is ready!";
      }
      : else_if (is_exists "gang_pigeon") {
         : print "There are no pigeons here.";
      }
   }
   : if (is_at "church_inside" && is_exists "gang_pigeon") {
      : print "{message_church_inside_gang}";
   }
   : if (is_at "church_tower" && is_exists "gang_pigeon") {
      : print "\"Okay, everything should go well now. We're almost done. The next step is to continue from Montauk Beach\", says <Larry<#fee>>.";
      : set_true "is_north_open";
      : destroy "helping_larry";
      : create "morehelping_larry" target = "montauk_beach";
      : set_true "can_leave_church";
   }
   : if (is_at "labyrinth_start" ) {
       : set_true "in_labyrinth";
       : set_integer var = "labyrinth_position_x"  value = "0" ;
       : set_integer var = "labyrinth_position_y"  value = "28" ;
       : set_integer var = "day_spend_labyrinth_enigma" value = "0";
       : update_graphic;
   }
   : else_if (in_labyrinth && !is_at "labyrinth_win") {
       : if (day_spend_labyrinth_enigma < 2) {
          : print "You have made your first move to get to the end, it's still so far away.";
       }
       : else {
            : print "You have spent {day_spend_labyrinth_enigma} moves to get to the end but it's still so far away.";
       }
       : print "Restart by entering <ENTER<#fdd>>";
   }
   : if (is_at "labyrinth_win" ) {
      : if (!hard_mode && day_spend_labyrinth_enigma <= 6) {
         : print "You did it in the shortest time possible! You saved Christmas!";
         : goto "delivery";
      }
      : else_if (hard_mode && day_spend_labyrinth_enigma >= 10) {
         : print "You did it in the longest time possible! Now pigeons know the route they need to avoid and you saved Christmas!";
         : goto "delivery";
      }
      : else {
            : print "Getting to the end was too {hard_mode ? `fast` : `long`} ({day_spend_labyrinth_enigma} moves), TRY AGAIN!\n(it was just a simulation so Christmas is still ON, YAY!)\n\nRetry it taking even {hard_mode ? `more` : `less`} moves to save CHRISTMAS!";
            : goto "montauk_beach";
      }
      : set_false "in_labyrinth";
      : press_any_key;
      : redescribe;
   }
   : if (is_at "delivery") {
      : press_any_key;
      : goto "room_tree";
      : redescribe;
   }
   #: gosub "play_music";
}

######################################
#  On Command                        #
######################################

on_command {
   : match "follow _;about _; credit _; credits _; readme _"  {
      : if ((verb_is "about" || verb_is "follow") && is_exists (s1())) {
         : set_sentence {("examine "+ rationalized "noun1")};
      }
      : else {
          : print "YOU CAN FOLLOW OR CHECK OK FEATHER EVERYWHERE: https://www.okfeather.com " ;
      }
   }
   : match "get all;give all" {
      : print "I know it's Christmas, but that's a little too much.";
   }
   : if (is_at "montauk_beach" && has_food_fight) {
       : match "play _;replay _;talk pigeon;talk larry;find solution;try again;x pigeon;x fight;resolve fight;help fight;x larry" {
         : gosub "play_lying_puzzle";
         : if (has_food_fight) {
            : if (!gave_wrong_answer_lying) {
                : set_true "gave_wrong_answer_lying";
                : print "\"You could try to find {hard_mode?`a`:`the`} solution again or go somewhere else, we will not move until this is solved anyway\" says Larry.";
                : press_any_key;
            }
         }
         : else {
            : press_any_key;
            : print "Larry said \"We will need to go to the church tower, gather the troops there with a secret code.\" ";
            : press_any_key;
         }
         : return;
      }
   }
   : if (!has_food_fight && !is_exists "larry") {
      : match "play logic; replay logic" {
         : if (verb_is "replay") {
            : set_true var="keep_same_logic";
         }
         : set_true var="is_playing_logic";
         : gosub "play_lying_puzzle";
         : set_false var="is_playing_logic";
         : set_false var="keep_same_logic";
      }
   }
   : if (is_at "church_tower") {
      : mask {
         : match "exit _; north _" {
            : set_sentence "down";
         }
      }
   }
   : if (is_at "coocoo_cafe") {
      : mask {
         : match "north _; go cafe" {
            : set_sentence "enter";
         }
      }
   }
   : if (is_at "coocoo_inside") {
      : mask {
         : match "south _; leave cafe" {
            : set_sentence "exit";
         }
      }
   }
   : if (is_at "church_inside") {
      : mask {
         : match "enter _; south _" {
            : set_sentence "up";
         }
         : match "north _" {
            : set_sentence "exit";
         }
      }
   }
   : if (is_at "church") {
      : mask {
         : match "south _; open door; open church; unlock door; unlock church; go church" {
            : set_sentence "enter";
         }
      }
   }
   : match "kill *" {
      : if (is_carried (s1())) {
         : print {("It would be a waste to "+original "verb" + " what I have taken!!!")};
      }
      : else_if (is_present (s1())) {
         : print "The thought could never even start to cross my mind.";
      }
   }
   : match "ho _; oh _; ha _; ah _" {
      : print "Ho ho ho... if Christmas is saved children will be so Ha Ha Happy!";
   }
   : if (hard_mode) {
       : match "get all" {
            : print "You can't find it.";
       }
   }
   : match "examine comment" {
      : set_sentence "comment";
   }
   : match "comment _" {
      : set_string var="string_tmp" {(substring {offset -> (strlen {(original "verb")}) string -> (command_text())})};
      : if (string_tmp == "") {
        : if (comments == "") {
            : print "You have not made any comment yet";
        }
        : else {
            : print "Here are all the comments you have made:{comments}";
        }
     }
     : else {
        : print "I'm adding that to my list of <comments<#fee>>.";
        : set_string var="comments" {(comments + "\n<_<#000>>" + string_tmp)};
     }

   }
   : match "drop *" {
      : print "Your pockets are very big, you don't need to drop anything.";
   }
   : match "cheat bread" {
     : pocket "bread";
   }
   : match "cheat ticket" {
     : create "church_ticket";
     : pocket "church_ticket";
   }
   : match "cheat dictionary" {
     : create "dictionary";
     : pocket "dictionary";
   }
   : match "cheat *" {
     : goto {(rationalized "noun1")}
     : if (current_location() == rationalized "noun1") {
        : redescribe;
     }
     : else_if (noun1_is "bread" || noun1_is "ticket" || noun1_is "dictionary") {
        : print {("you got " + original "noun1" + "!")}
     }
     : else {
        : print "Unknown verb - \"cheat\".";
     }
   }

   : if (is_present "map" && !is_carried "map" && is_at "santa_cellar") {
      : match "get map" {
        : print "This {hard_mode?`map`:`<map<#fee>>`} will probably be very useful.";
        : pocket "map";
        : press_any_key;
      }
      : match "exit _" {
         : mask {
            : print "This {hard_mode?`map`:`<map<#fee>>`} could probably be useful, I'm taking it.";
            : pocket "map";
            : press_any_key;

         }
      }
   }

   : match "clear -; redescribe -" {
        : redescribe;
   }

   : match "examine map; map _; use map" {
      : if (is_carried "map") {
          : set_theme "theme_mono";
          : clear_screen;
          : print {("^n^^c^<____________<#000>><Santa takeoff<#" + (in_labyrinth ? "afa" : is_north_open ? "aaf" : "faa") + ">>" )}
          : print "^n^^c^<_____________<#000>>⬆";
          : print {("^n^^c^<___<#000>><Inside<#" + (is_at "coocoo_inside"?"afa": is_exists "grateful_waitress" || !can_leave_church ? "faa" : "aaf")+">><___<#000>>--------------")};
          : print {("^n^^c^<______<#000>>⬆<_____<#000>>|<Montauk Beach<#" + (is_at "montauk_beach"?"afa": can_leave_church ? "aaf" : "faa")+">>|")};
          : print "^n^^c^--------------------------";
          : print {("^n^^c^|<Coocoo Cafe<#" + (is_at "coocoo_cafe"?"afa": can_leave_church ? "aaf" : "faa")+">>| <Nicobar Park<#" + (is_at "nicobar_park"?"afa": can_leave_church ? "aaf" : "faa")+">>|")};
          : print "^n^^c^--------------------------";
          : print {("^n^^c^|<_<#000>> <Bookshop<#" + (is_at "bookshop"?"afa": can_leave_church ? "aaf" : "faa")+">> |<_<#000>> <South Park<#" + (is_at "south_park"?"afa": can_leave_church ? "aaf" : "faa")+">> |")};
          : print "^n^^c^--------------------------";
          : print {("^n^^c^<____________<#000>>| <__<#000>> <Church<#" + (is_at "church"?"afa": is_exists "larry" || !can_leave_church ? "faa" : "aaf")+">> <__<#000>>|")};
          : print "^n^^c^<____________<#000>>--------------";
          : print {("^n^^c^<____________<#000>>⬇\n<____________<#000>><Inside<#" + (is_at "church_inside"?"afa": is_exists "unpaid_tourguide" || !is_carried "church_ticket" ? "faa" : "aaf")+">>")};
          : print {("^n^^c^<____________<#000>>⬇\n<____________<#000>><Tower<#" + (is_at "church_tower"?"afa":is_exists "unpaid_tourguide" || !is_carried "church_ticket" ? "faa" : "aaf")+">>")};
          : press_any_key;
          : set_theme "theme_base";
          : redescribe;
      }
      : else_if (is_present "map") {
         : print "A {hard_mode?`map`:`<map<#fee>>`} of the village, maybe it could be useful?";
      }
   }
   : match "sound _; music _" {
      : if (preposition_is "on" || noun1_is "lowest" || noun1_is "low" || noun1_is "normal" || noun1_is "high" || noun1_is "highest") {
         : mask {
            : set_string var="string_tmp" {(rationalized "noun1")}
            : set_sentence "nothing";
            : if (music_ever_enabled) {
               : if (!sysvar_bool "sysvar_sound_enabled") {
                  : set_sentence "sound on";
                  : set_false "is_sound_muted";
               }
            }
            : else {
               : gosub "set_sound_on";
               : if (music_ever_enabled) {
                  : gosub "play_music";
               }
               : else {
                  : set_string var="nothing_message" text="You have not enabled the music";
               }
            }
            : if (string_tmp != "") {
               : set_string var="sound_volume" {(string_tmp)};
               : print "Sound volume set to {sound_volume}.";
            }
            : gosub "update_volume";
         }
      }
      : else_if(noun1_is "off") {
         : mask {
           : set_sentence "sound off";
           # to prevent not restarting on SOUND ON
           : play_music "music_victory";
           : set_string var = "current_track" text="";
           : set_true "is_sound_muted";
           : gosub "update_volume";
         }
      }
      : else {
         : if (sysvar_bool "sysvar_sound_enabled") {
            : print "<SOUND OFF<#fdd>> | <LOWEST<#fdd>> | <LOW<#fdd>> | <NORMAL<#fdd>> | <HIGH<#fdd>> | <HIGHEST<#fdd>> to disable sound or change volume.";
         }
         : else {
            : print "<SOUND ON<#fdd>> | <LOWEST<#fdd>> | <LOW<#fdd>> | <NORMAL<#fdd>> | <HIGH<#fdd>> | <HIGHEST<#fdd>> to enable sound and change volume.";
         }
     }
   }

   : if (is_at "church_inside") {
      : match "ring *"  {
         : stop_music;
         : if (noun1_is "143") {
            : play_music sound="music_bells";
            : if (!is_exists "gang_pigeon") {
               : print "{message_church_inside_gang}";
               : swap o1="absent_pigeon" o2="gang_pigeon";
               : destroy "helping_larry";
               : if (!hard_mode) {
                  : set_false "can_leave_church";
               }
            }
            : else {
               : print "You found the signal again, congratulations!";
            }
         }
         : else {
            : set_string var="current_track" text="";
            : gosub "random_music";
            : gosub "random_music";
            : gosub "random_music";
            #: gosub "play_music";
            : if (is_carried "pigeon_bookreal") {
               : print "Such a disgraceful melody could never attract any pigeon. It is said that the secret combination is a recurring number in heavenly pigeon <scriptures<#fee>>.";
            }
            : else {
               : print "Nothing has happened, this must not be the secret combination. The welcoming <tourist<#fee>> might have a clue. Also, such a disgraceful melody could never attract any <pigeon<#fee>>. Just sayin'";
            }
         }
      }
   }

   : match "examine bell"  {
      : if (is_at "church_tower") {
         : print "These <bells<#fee>> are used to make delightful songs." ;
      }
   }

   : match "examine bin"  {
      : if (is_at "coocoo_cafe") {
         : if (is_exists "full_bin") {
             : print "There is a perfect loaf of <bread<#fee>> inside. Maybe someone is hungry and you should <get<#fee>> it?";
         }
         : else {
             : print "There is sometimes a loaf of <bread<#fee>> inside the <bin<#fee>> but not currently." ;
         }
      }
   }

   : match "give bread"  {
      : if (is_present "larry" && is_carried "bread") {
         : print "Larry takes the loaf of bread and says \"Let's share the bread with all my friends!\" ";
         : press_any_key;
         : print "After breaking the bread and distributing parts to all pigeons, they eat in silence until...";
         : press_any_key;
         : print "\"Whomp! Coo! Coocoo! Coo!\" There is a {hard_mode ? `fight`:`<fight<#fee>>`} about sharing the {hard_mode ? `bread`:`<bread<#fee>>`}, it seems everyone did not receive the same quantity.";
         : set_true "has_food_fight";
         : destroy "bread" ;
         : set_true "has_good_hope";
         : swap o1 = "flying_pigeon"  o2 = "new_pigeon";
         : press_any_key;
      }
   }
   : match "get bread"  {
      : if (is_at "coocoo_cafe" && is_exists "full_bin") {
        : print "You take the <loaf<#fee>> of <bread<#fee>> and other delicacies from the <bin<#fee>>." ;
        : swap o1 = "full_bin"  o2 = "bin" ;
        : pocket "bread";
      }
      : if (is_at "coocoo_inside") {
         : print {("There is no "+original "noun1"+" I can take here for free.")};
      }
   }
   : match "thank bin; thank -"  {
      : if (is_exists "grateful_waitress" && is_present "bin") {
         : print "The bin doesn't answer, but it is probably very happy to be helpful!";
      }
   }

   : match "examine book; read book; use book; examine bible; read bible; use bible"  {
      : if (is_at "nicobar_park" && !is_exists "pigeon_booklove") {
         : print "Some <books<#fee>> are more important than food. Like this <book<#fee>>, maybe." ;
      }
      : if (is_at "nicobar_park" && is_carried "pigeon_booklove") {
         : print "Inside it says \'<Pigeons<#fee>> love carrying heavy objects, but need energy to do so.\'" ;
      }
      : if (is_carried "pigeon_bookreal") {
         : print "Inside it says \'A <pigeon<#fee>> can fly up to {hard_mode ? `one hundred forty-three` : `<143<#fee>>`} kilometers per hour. Just like Caballero.\'" ;
      }
      : if (is_at "bookshop" && !is_carried "pigeon_booklove") {
         : print "There are so many <books<#fee>> here." ;
      }
      : if (is_at "bookshop" && is_carried "pigeon_booklove") {
         : print "Who would want to read such a tiny <book<#fee>> anyway?" ;
      }
   }

   : match "get book"  {
      : if (is_at "nicobar_park" && is_present "pigeon_book") {
        : print "You take the <book<#fee>>." ;
        : destroy "pigeon_book";
        : create "pigeon_booklove";
        : pocket "pigeon_booklove";
      }
   }

   : match "examine caballero"  {
      : if (is_carried "pigeon_bookreal") {
        : print "Caballero once flew from Etroeungt to Sibculo (239km), a real hero." ;
      }
   }

   : match "examine cafe"  {
      : if (is_at "coocoo_cafe") {
         : if (is_exists "grateful_waitress") {
            : if (is_exists "full_bin") {
                : print "The <Coocoo<#fee>> <Cafe<#fee>> is closed, thanks for helping! I wonder where are the leftover <bread<#fee>> and <croissants<#fee>>.";
            }
            : else {
                : print "The <Coocoo<#fee>> <Cafe<#fee>> is closed, thanks for helping!";
            }
         }
         : if (is_exists "waitress") {
            : print "The <Coocoo<#fee>> <Cafe<#fee>> is about to close, but there is so much left to do!" ;
         }
      }
      : if (is_at "coocoo_inside" && has_not_created "grateful_waitress") {
         : print "Can you {hard_mode?`help`:`<help<#fee>>`} the <Coocoo<#fee>> <Cafe <#fee>>with {hard_mode?`clean`:`<clean<#fee>>`}ing before they can celebrate Christmas?" ;
      }
      : if (is_at "coocoo_inside" && is_exists "grateful_waitress") {
         : print "You have a lifetime pass to visit the <cafe<#fee>>, even when it is closed.";
         : set_true "has_lifetime_cafe_pass";
      }
   }
   : match "enter _; use pass" {
      : mask {
         : if (is_at "coocoo_cafe" && has_lifetime_cafe_pass) {
            : print "Your still have your lifetime pass to enter when the cafe is closed, but it doesn't open the locked door. It will be open again soon!";
         }
      }
   }

   : match "examine children"  {
      : if (is_at "nicobar_park") {
         : print "You are the only <child<#fee>> here." ;
      }
   }

   : match "examine road"  {
      : if (is_at "south_park" && is_exists "larry") {
         : print "There is too much snow on the South road to take it. But you can see someone clearing it from afar.";
      }

      : else_if (is_at "south_park" && !is_exists "larry") {
         : print "The snow covering the road to the church has been cleared, you can now take it.";
      }
   }
   : match "take road"  {
      : if (is_at "south_park" && is_exists "larry") {
         : print "You can't right now, there is too much snow.";
      }
      : else_if (is_at "south_park" && !is_exists "larry") {
         : print "You cannot literally take a road, that's an expression.";
      }
   }

    : match "examine door; examine window; examine wall"  {
      : if (is_at "church") {
         : print "You see beautiful details on the door, walls and windows. These must have been added centuries after the church was built." ;
      }
   }

   : match "examine church"  {
      : if (is_at "church") {
         : print "A <church<#fee>> in Norman style, the architecture is captivating. You can <enter<#fdd>> to visit." ;
      }
      : if (is_at "south_park") {
         : print "You need to go <south<#fdd>> to see the <church<#fee>> closer.";
      }
   }

   : match "examine bread"  {
      : if (is_at "coocoo_inside") {
         : print "The <cafe<#fee>> doesn't take any orders." ;
      }
      : else_if (is_carried "bread") {
         : print "This seems to be a perfectly fine piece of bread. Maybe someone is hungry?";
      }
   }

   : match "examine painting"  {
      : if (is_at "coocoo_inside") {
         : print "Nobody knows the author of this painting. Maybe it's an autoportrait." ;
      }
   }

   : match "examine customer"  {
      : if (is_at "coocoo_inside") {
         : print "There is no customer." ;
      }
   }

   : match "give ticket"  {
      : if (is_present "unpaid_tourguide" && is_carried "church_ticket") {
         : print "The <tour<#fee>> <guide<#fee>> gladly checks the <ticket<#fee>>, gives it back to you and says \"Great, let's visit the church! Please come in! And don't lose the <ticket<#fee>>!\" ";
         : swap o1 = "unpaid_tourguide"  o2 = "friendly_tourguide" ;
      }
   }


   : match "use dictionary; read dictionary; translate _; examine dictionary"  {
      : if (is_present "tourist") {
         : if (is_carried "dictionary") {
           : print "The <tourist<#fee>> laughs \"Oh you don't speak Korean? Dear me! You should have said so! I was meditating over this {hard_mode?`book`:`<book<#fee>>`}. Oh, I have an English version as well. Please take it.\". She gives you the {hard_mode?`book`:`<book<#fee>>`}. ";
           : create "pigeon_bookreal" ;
           : pocket "pigeon_bookreal" ;
           : swap o1 = "tourist"  o2 = "happy_tourist" ;
         }
         : else {
           : print "I need to learn Korean or find a way to <translate<#fee>> Korean before I can <talk<#fee>> to the <tourist<#fee>>.";
         }
      }
   }

   : match "examine fountain"  {
      : if (is_at "south_park") {
         : print "Discreet but well-thought-out, this <fountain<#fee>> makes the delight of thirsty <pigeons<#fee>> and overheated travellers." ;
      }
   }

   : match "examine guide; talk _"  {
      : if (is_present "unpaid_tourguide") {
         : clear_screen;
         : print "\"No <ticket<#fee>>? No visit!\", says the poetic <tour<#fee>> <guide<#fee>>. Can you give your <ticket<#fee>>?" ;
         : press_any_key ;
         : redescribe;
      }
      : if (is_present "friendly_tourguide" && is_carried "church_ticket") {
         : print "\"Welcome! Come in!\", says the happy <tour<#fee>> <guide<#fee>>." ;
      }
      : if (is_present "friendly_tourguide" && !is_carried "church_ticket") {
         : print "\"I've seen you...  But where is your <ticket<#fee>>? I hope you didn't give it to a random stranger.\", says the tour guide." ;
      }
   }

   : match "get larry"  {
      : if (is_at "montauk_beach") {
         : print "<Pigeons<#fee>> are not pocket monsters, you cannot just catch them." ;
      }
   }

   : match "examine larry; talk larry; talk -"  {
      : if (is_present "larry") {
         : print "\"Can't you see we are all hungry?\", says Larry." ;
      }
      : else_if (is_present "helping_larry" && is_exists "absent_pigeon") {
         : print "<Larry<#fee>> has gone to organize everything." ;
      }
      : else_if (is_present "morehelping_larry") {
         : print "\"Are you ready to go <North<#fdd>> for the big delivery?\"" ;
      }
      : else_if (is_at "church_tower" && is_exists "morehelping_larry") {
         : print "\"We're ready when you want to go, I'd suggest now! Maybe? We will gather at Montauk Beach, join us there!\"";
      }
      : else_if (is_at "montauk_beach") {
         : print "<Larry<#fee>> is not here." ;
      }
   }
   : match "thank larry; thank -; thank pigeon; high five; highfive larry; highfive pigeon; highfive -"  {
      : if (is_present "morehelping_larry" || (is_at "church_tower" && is_exists "morehelping_larry")) {
         : print "\"It's all thanks to your hard work!\"";
      }
   }

   : match "examine lovers"  {
      : if (is_at "montauk_beach") {
         : print "You see <pigeons<#fee>> making a heart shape in the sky." ;
      }
      : if (is_at "nicobar_park") {
         : print "You are alone here." ;
      }
   }

   : match "sing _" {
      : print "You start singing your favourite Christmas Carol, \"Feathery Christmas\".";
      : if (is_at "nicobar_park" && (is_exists "flying_pigeon" || is_exists "new_pigeon")) {
         : print "You are singing along with the pigeon, what a great duo!";
      }
      : if (is_present "larry"  || is_present "helping_larry") {
         : print "Larry starts coocooing the song with you.";
      }
      : if (is_at "santa_cellar") {
         : print "You hear one reindeer faintly tring to hum along, then snoring loudly again.";
      }
      : if (is_present "morehelping_larry") {
         : print "Larry and all his friends start coocooing the song with you.";
      }
      : if (is_present "gang_pigeon") {
         : print "All the pigeons are coocooing the song with you. The whole church is resonating with it.";
      }
      : if (is_present "waitress") {
         : print "Nobody seems to hear you because they are so busy.";
      }
      : if (is_present "grateful_waitress") {
         : print "The waitress smiles gently. \"This song is always playing here in the winter, no wonder you can't get it out of your mind\", she tells you.";
      }
      : if (is_present "tourist") {
         : print "The tourist smiles gently. \"Oh you like it? I wrote it for a game I made with friends\", she tells you.";
      }
   }

   : match "get coffee; examine coffee"  {
      : if (is_present "waitress") {
         : print "The smell of coffee is mesmerizing... you'd like to get one but the team cannot serve you right now." ;
      }
      : if (is_present "grateful_waitress") {
         : print "To thank you, the team lets you access their own pot of fragrant Vietnamese coffee... you take a big cup to stay focused." ;
      }
   }

   : match "get meal; examine meal"  {
      : if (is_at "coocoo_cafe") {
         : print "<Pigeons<#fee>> are too high, and you are not fit enough to get to the <roof<#fee>>." ;
      }
      : if (is_at "nicobar_park") {
         : print "The <pigeon<#fee>> is very high in the sky, and you cannot fly without a reindeer." ;
      }
   }

   : match "examine montauk; examine place"  {
      : if (is_at "montauk_beach") {
         : if (has_food_fight) {
             : print "The <beach<#fee>> is not very quiet right now with the <fight<#fee>> about food." ;
         }
         : else {
             : print "The <beach<#fee>> is quiet today." ;
         }
      }
   }

   : match "examine owner; talk owner; talk -"  {
      : if (is_present "bookshop_owner" && !is_carried "dictionary") {
         : print "\"안녕하세요! \", says the bookshop <owner<#fee>>. Maybe you will need to <translate<#fee>> to <English<#fee>>." ;
      }
      : if (is_present "bookshop_owner" && is_carried "dictionary") {
         : print "\"Now that you have a <dictionary<#fee>>, you are ready to handle Korean conversations anywhere in the world, congratulations!\", says the bookshop <owner<#fee>>." ;
      }
   }

   : match "translate owner; talk english; translate english; translate -; use dictionary; look dictionary; read dictionary"  {
      : if (is_present "bookshop_owner") {
         : clear_screen;
         : if (is_carried "dictionary") {
             : print "\"안녕하세요! or Hello! Now that you have a <dictionary<#fee>>, you are ready to handle Korean conversations anywhere in the world, congratulations!\"";
         }
         : else {
             : print "\"Oh you don't speak Korean? Dear me! Everyone needs a Korean-English <dictionary<#fee>> in their life. You can get one by {hard_mode?`exchanging`:`<exchanging<#fee>>`} with another {hard_mode?`book`:`<book<#fee>>`}.\"" ;
         }
         : press_any_key ;
         : redescribe;
      }
   }

   : match "talk 안녕하세요; say 안녕하세요; talk korean"  {
      : if (is_present "bookshop_owner") {
         : print "\"공공외교가 단기적으로 눈금을 움직이는 능력으로 평가받는 세상에서는 인적 교류와 같은 장기적인 프로젝트는 효과가 별로 없고단기적인 옹호 노력만이 타당하게 보일 수 있다.\" That's fascinating.";
      }
      : if (is_present "tourist") {
         : print "\"강제적인 힘과 반대되는 소프트파워는 상대방을 자신이 원하는 대로 하도록 설득하는 능력이다. That's mind-blowing.\"";
      }
   }

   : match "give book; exchange book"  {
      : if (is_present "bookshop_owner" && is_carried "pigeon_booklove") {
            : print "\"Thank you! 'Tis the season to be jolly and enlighten your spirits with this piece of literature. It will open a new world to you.\" You get a Korean-English <dictionary<#fee>>." ;
            : destroy "pigeon_booklove" ;
            : create "dictionary" ;
            : pocket "dictionary" ;
      }
      : if (is_present "bookshop_owner" && is_carried "pigeon_bookreal") {
            : print "\"This <book<#fee>> has a Not For Sale Specimen stamp on it. Sorry, we cannot take it.\" " ;
      }
   }
   : match "thank owner; thank -"  {
      : if (is_present "bookshop_owner" && is_exists "dictionary") {
         : print "\"You are quite welcome, I love to see people in search of knowledge!\"";
      }
   }

   : match "give dictionary; exchange dictionary"  {
         : if (is_present "bookshop_owner" && is_carried "dictionary") {
            : print "\"We do not accept returns.\" " ;
      }
   }

   : match "examine dictionary"  {
         : if (is_exists "dictionary") {
            : print "\"A Korean-English <dictionary<#fee>>.\" " ;
      }
   }

   : match "examine logo"  {
      : if (is_at "coocoo_inside" || is_at "coocoo_cafe") {
         : print "The emblematic logo for the <Coocoo<#fee>> <Cafe<#fee>>. Motto \'My bird and my coffee\'." ;
      }
   }

   : match "examine park"  {
      : if (is_at "nicobar_park" && is_exists "larry") {
         : print "You are alone, there is nothing to do here and it's raining." ;
      }
      : if (is_at "nicobar_park" && is_exists "helping_larry") {
         : print "You are alone, there is nothing to do here but you have a bit more hope." ;
      }
      : if (is_at "nicobar_park" && is_exists "morehelping_larry") {
         : print "You are alone, there is nothing to do here but things are looking good." ;
      }
      : if (is_at "south_park" && is_exists "larry") {
         : print "A quiet part of the <park<#fee>>, in warmer months you can hear the water flowing from the <pigeon<#fee>> <fountain<#fee>>. There is a beautiful view on the <church<#fee>>." ;
      }
   }

   : match "examine bag; get bag"  {
      : if (is_at "coocoo_cafe" || (is_at "nicobar_park" && is_exists "flying_pigeon")) {
         : print "Both kids and pigeons love their Sappy Meals. You're way too grown-up for that." ;
      }
   }

   : match "examine pigeon"  {
      : if (is_at "coocoo_cafe") {
         : print "You see <pigeons<#fee>> eating and flying with colorful doggy <bags<#fee>>. It's like a very busy <restaurant<#fee>>." ;
      }
      : if (is_at "montauk_beach") {
         : if (is_exists "larry") {
            : print "<Pigeons<#fee>> pretend not to see you but are looking at you on the sly: could you be here to bring a feast?" ;
         }
         : else_if (is_north_open) {
            : print "Pigeons are ready to fly North with you!";
         }
         : else_if (is_exists "gang_pigeon") {
            : print "There are no pigeons here, I wonder where they could be?";
         }
         : else {
            : print "<Pigeons<#fee>> are flying, exercising and eating. Very healthy." ;
         }
      }

      : if (is_at "nicobar_park" && is_exists "flying_pigeon") {
         : print "The <pigeon<#fee>> looks happy and busy.  It is singing while carrying a Sappy <Meal<#fee>> <bag<#fee>>: \' lovers meet in Montauk Beach, lalala \'." ;
      }

      : if (is_at "nicobar_park" && is_exists "new_pigeon") {
         : print "The <pigeon<#fee>> looks happy and busy.  It is singing while carrying a dumbbell: \'Best carriers meet in Montauk Beach, lalala \'" ;
      }
      : if (is_at "church_tower" && is_exists "gang_pigeon") {
         : print "The <pigeons<#fee>> are getting ready for a big mission." ;
      }
      : if (is_at "church_tower" && is_exists "absent_pigeon") {
         : print "How can you gather all <pigeons<#fee>> here?" ;
      }
      : if (is_at "bookshop" || is_at "church" || is_at "south_park" || is_at "church_inside" || is_at "coocoo_inside" || is_at "santa_cellar" || in_labyrinth) {
         : print "Roses are red, Violets are blue, <Pigeons<#fee>> fly in the sky, And so should you." ;
      }

   }

   : match "get pigeon; talk pigeon"  {
      : if (is_at "coocoo_cafe") {
         : print "<Pigeons<#fee>> are too high, and you are not fit enough to get to the <roof<#fee>>." ;
      }
      : if (is_at "montauk_beach") {
         : print "<Pigeons<#fee>> are not pocket monsters, you cannot just catch them." ;
      }
      : if (is_at "nicobar_park") {
         : print "The <pigeon<#fee>> is very high in the sky, and you cannot fly without a reindeer." ;
      }
      : if (is_present "larry") {
         : clear_screen;
         : print "\"My companions and I are very hungry. This year it has been particularly difficult to gather food provisions.\", says Larry." ;
         : press_any_key ;
         : redescribe;
      }
      : if (is_present "morehelping_larry" && is_at "montauk_beach") {
         : print "\"Are you ready to find the shortest path to distribute everything?\", says Larry." ;
      }
      : if (is_present "gang_pigeon" && is_at "church_tower") {
         : print "\"Great job! Now that we are all reunited, we can continue from Montauk Beach\", says Larry." ;
      }
   }

   : match "examine potion; get potion; examine cellar"  {
      : if (is_at "santa_cellar") {
         : print "These <potions<#fee>> give strength for Christmas day. You already had a drink earlier today, so now you should focus on delivering the <presents<#fee>>." ;
      }
   }

   : match "examine present"  {
      : if (is_at "santa_cellar") {
         : print "There is an enormous amount of <presents<#fee>> here... but how will I get them to children in time?" ;
      }
      : else {
         : print "There are no <presents<#fee>> here." ;
      }
   }

   : match "examine reindeer; examine rudolph"  {
      : if (is_at "santa_cellar") {
         : print "It seems that <Santa<#fee>>'s <potions<#fee>> only work on <Santa<#fee>>. The <reindeer<#fee>> are all incapable of moving! At least they don't look too unhappy." ;
      }
   }

   : match "happy christmas" {
      : if (is_present "bookshop_owner") {
         : print {("\""+camel(original "verb") + " " + camel(original "noun1") + " to you too!\"")};
      }
      : else_if (is_present "waitress") {
         : print {("\""+camel(original "verb") + " " + camel(original "noun1") + "!! There is still lot of work to do here!\"")};
      }
      : else_if (is_present "grateful_waitress") {
         : print {(camel(original "verb") + " " + camel(original "noun1") + " to you! Thanks for all your help!")};
      }
      : else_if (is_present "larry") {
         : print {("\"Feathery " + (original "noun1") + "!\"")};
      }
      : else_if (is_present "morehelping_larry" || (is_at "church_tower" && is_exists "morehelping_larry")) {
         : print {("\"FEATHERY " + upper(original "noun1") + "! With all your work we can confirm it will be happy!\"")};
      }
      : else_if (is_present "nicobar_man1") {
         : print {("\""+lower(original "verb") + " " + lower(original "noun1") + "\"")};
      }
      : else_if (is_present "nicobar_man2") {
         : print {("\""+camel(original "verb") + " " + camel(original "noun1") + "\"")};
      }
      : else_if (is_present "tourist") {
         : print {("\"행복한 크리스마스 되십시오\"")};
      }
      : else_if (is_present "happy_tourist") {
         : print {("\"크리스마스 잘 보내세요! Merry Christmas!\"")};
      }
      : else_if (is_present "unpaid_tourguide") {
         : print {("\"Good " + camel(original "noun1") + "\"")};
      }
      : else_if (is_present "unpaid_tourguide") {
         : print {("\"Merry " + camel(original "noun1") + "\"")};
      }
      : else {
         : print {("Ho ho ho! "+camel(original "verb") + " " + camel(original "noun1") + " to everyone!")};
      }
   }
   : if (verb_is ":(") {
      : if (is_north_open) {
         : print "I should smile, we are nearly finished saving Christmas!";
      }
      : else_if (!is_exists "larry") {
         : print "I should not be sad, we are in the last steps of saving Christmas!";
      }
      : else {
         : print "Let's not be sad, we can still save Christmas!";
      }
   }
   : if (verb_is ":)") {
      : if (is_north_open) {
         : print "Ho ho ho! We are just about to save Christmas! What a joyous day to remember!";
      }
      : else {
         : print "Ho ho ho! Let's save Christmas with a smile!";
      }
   }

   : match "talk _"  {
      : if (is_at "santa_cellar") {
         : print "All the <reindeer<#fee>> are smiling with their eyes closed, not too responsive though. Even <Rudolph<#fee>>, who usually is unstoppable." ;
      }
   }

   : match "examine roof"  {
      : if (is_at "coocoo_cafe") {
         : print "You see <pigeons<#fee>> eating and flying with colorful doggy <bags<#fee>>. It's like a very busy <restaurant<#fee>>." ;
      }
   }

   : match "examine shop; examine bookshop; examine store"  {
      : if (is_at "bookshop") {
         : print "This is an <exchange<#fee>> only bookshop. <Books<#fee>> are the currency." ;
      }
   }

   : match "examine ticket"  {
      : if (is_carried "church_ticket") {
         : print "A cheap <ticket<#fee>>, but no cheap wonder!";
      }
   }

   : match "examine tourist; talk tourist; talk -; wave tourist"  {
      : if (is_present "tourist") {
         : print "\"나는 비둘기를 위해 여기에 왔습니다! '비둘기 집에 음식을 두면 비둘기가 옵니다'\", says the cheerful <tourist<#fee>>. Maybe you will need to use another item to have a fruitful conversation." ;
      }
      : if (is_present "happy_tourist") {
         : print "\"It doesn't matter what people call you unless they call you <pigeon<#fee>> pie and eat you up.\", says the happy <tourist<#fee>>." ;
      }
   }
   : match "thank tourist; thank -"  {
      : if (is_present "happy_tourist") {
         : print "\"아니에요! You are welcome!\", say the joyous <tourist<#fee>>." ;
      }
   }

   : match "examine church; examine ellacombe"  {
      : if (is_at "church_inside") {
         : print "All you notice is the <ellacombe<#fee>> <apparatus<#fee>>. You are able to <ring<#fee>> all the bells on your own, thanks to a simple number system." ;
      }
   }

   : match "examine stained; examine glass; examine window"  {
      : if (is_at "church_inside") {
         : print "This is a stained glass window depicting The Holy Spirit as a <dove<#fee>>." ;
      }
   }

   : match "examine window; examine glass"  {
      : if (is_at "coocoo_inside") {
         : print "The view is beautiful." ;
      }
   }

   : match "examine church; examine tower"  {
      : if (is_at "church_tower") {
         : print "Some suggest this <tower<#fee>> is a special place to organize secret missions." ;
      }
      : if (is_at "church_inside") {
         : print "The <tower<#fee>> is <upstairs<#fdd>>. Go <up<#fdd>>!" ;
      }
   }

   : match "examine tower"  {
      : if (is_at "church") {
         : print "You need to <enter<#fdd>> the <church<#fee>> then go upstairs to access the <tower<#fee>>." ;
      }
   }

   : if (is_present "waitress") {
      : match "help -" {
         : if (!hard_mode) {
            : ask_bool {
               var      = help_about_commands
               question = Do you want help about game commands?
            }
            : if (!help_about_commands) {
               : set_sentence "help waitress";
            }
         }
      }
      : match "help waitress; help cafe; clean cafe; tidy cafe; give help; help clean; clean -"  {
         : print "You are helping the <Coocoo<#fee>> <Cafe<#fee>> team.";
         : swap o1 = "waitress"  o2 = "grateful_waitress" ;
         : swap o1 = "bin"  o2 = "full_bin" ;
      }
   }

   : match "examine waitress; talk waitress; talk -"  {
      : if (is_present "waitress") {
         : print "\"There is so much work!!!! Please {hard_mode?`help`:`<help<#fee>>`} me\", says the desperate {hard_mode?`waitress`:`<waitress<#fee>>`}." ;
      }
      : if (is_present "grateful_waitress") {
         : print "\"Thank you so much for your help! Now I can spend the rest of the night planning next year's development of the <Coocoo<#fee>> <Cafe<#fee>>. A more efficient team, more entertainers, more customers, that's my goal!\", says the ambitious <waitress<#fee>>." ;
      }
   }

   : match "talk _; wave man"  {
      : if (is_present "nicobar_man1" && !is_carried "church_ticket") {
         : clear_screen;
         : print "\"Have you visited the <church<#fee>>? It is famous for its ellacombe apparatus, a mechanism that allows one person to ring all the bells. I see you don't have a <ticket<#fee>>! Here, have one to visit.\", says the <man<#fee>>.";
         : create "church_ticket" ;
         : pocket "church_ticket" ;
         : swap o1 = "nicobar_man1"  o2 = "nicobar_man2" ;
         : press_any_key ;
         : redescribe;
      }
      : if (is_present "nicobar_man2") {
         : print "\"I know this <church<#fee>> by heart!\", says the <man<#fee>>.";
      }
   }
   : match "thank man; thank *"  {
      : if (is_present "nicobar_man2") {
         : print "\"It was my pleasure, I'm happy if more people enjoy our culture.\"" ;
      }
   }
   : match "hard -" {
      : set_true "hard_mode";
      : set_true "can_leave_church";
      : print "Game is now in hard mode (harder puzzles, less hints) use <EASY<#fdd>> to go back to easy mode.";
   }
   : match "easy -" {
      : set_false "hard_mode";
      : print "Game is now in easy mode (easier puzzles, more hints) use <HARD<#fdd>> to go back to hard mode.";
   }

   : match "examine man; look man"  {
      : if (is_at "south_park") {
         : print "He is smiling and admiring the scenery.";
      }
   }

   : match "examine view"  {
      : if (is_at "church_tower") {
         : if (is_exists "absent_pigeon") {
            : print "The city is so beautiful. Admiring the winter twilight sky, you feel like being on top of the world. But something is missing...";
         }
         : if (is_exists "gang_pigeon") {
            : print "Who cares about the view on the city? You've never seen more pigeons in your life, and that alone is a memory you will cherish.";
         }
      }
      : if (is_at "coocoo_inside") {
         : print "The beautiful colour patterns in the sky make the window almost look like a painting." ;
      }
   }
   : match "examine sky"  {
      : if (!is_at "church_inside" && !is_at "santa_cellar") {
         : print "The sunset is making beautiful colour patterns in the sky, but it reminds you that the time for the delivery is nearing." ;
      }
      : if (is_at "church_inside" || is_at "santa_cellar") {
         : print "Here, you cannot see the sky." ;
      }
   }

   : match "examine yourself; talk yourself"  {
      : if (is_at "nicobar_park" && !has_good_hope) {
         : print "You are alone, there is nothing to do here and it's raining." ;
      }
      : if (is_at "nicobar_park" && has_good_hope) {
         : print "You are alone, there is nothing to do here but it's not raining anymore." ;
      }
      : if (is_at "santa_cellar") {
         : print "Almost all of your precious <drinks<#fee>> have been emptied. The Pourpon, the Vallentines... all gone." ;
      }
   }
   : if (in_labyrinth) {
      : match "start -; in -; enter -" {
          : goto "labyrinth_start";
          : redescribe;
      }
      : match "e _" {
         : mask {
           : if (try_move() != "") {
              : increment "day_spend_labyrinth_enigma";
              : set_integer var = "labyrinth_position_x" {( labyrinth_position_x + 22)}
              : update_graphic;
              : pause "50" ;
           }
         }
      }
      : match "s _" {
         : mask {
           : if (try_move() != "") {
              : increment "day_spend_labyrinth_enigma";
              : set_integer var = "labyrinth_position_y" {( labyrinth_position_y + 26)}
              : update_graphic;
              : pause "50" ;
           }
         }
      }
      : match "n _" {
         : mask {
           : if (try_move() != "") {
              : increment "day_spend_labyrinth_enigma";
              : set_integer var = "labyrinth_position_y" {( labyrinth_position_y - 26)}
              : update_graphic;
              : pause "50" ;
           }
         }
      }
      : mask {
        : if (try_move() == "labyrinth_n") {
            : gosub "labyrinth_right";
            : gosub "labyrinth_right";
            : gosub "labyrinth_right";
        }
        : if (try_move() == "labyrinth_nse") {
            : gosub "labyrinth_right";
            : gosub "labyrinth_right";
        }
        : if (try_move() == "labyrinth_see" && "labyrinth_nss" != current_location()) {
            : gosub "labyrinth_right";
            : gosub "labyrinth_right";
        }
        : if (try_move() == "labyrinth_nses") {
            : gosub "labyrinth_right";
            : gosub "labyrinth_right";
            : gosub "labyrinth_right";
        }
        : if (try_move() == "labyrinth_nsenee" && "labyrinth_nsesnn" != current_location()) {
            : gosub "labyrinth_right";
            : gosub "labyrinth_right";
        }
      }
   }
   : match "help -" {
       : if (!hard_mode && is_at "coocoo_inside") {
         : print "- Type '<CLEAN<#fdd>> <objectname<#fee>>' to try to clean the object/person";
       }
       : if (hard_mode) {
            : print "- Type '<EASY<#fdd>>' to get into easy mode (easier puzzles, more hints)";
       }
       : if (!hard_mode) {
            : print "- Type '<HARD<#fdd>>' to get into hard mode (harder puzzles, less hints)";
       }
       : if (!hard_mode && is_at "coocoo_inside") {
         : print "- Type '<HELP<#fdd>> <objectname<#fee>>' to try to help the object/person";
       }
       : print "- Type '<I<#fdd>>' to see what you are holding";
       : print "- Type '<GET<#fdd>> <objectname<#fee>>' to pick up an item";
       : print "- Type '<GIVE<#fdd>> <objectname<#fee>>' to give an object to someone";
       : print "- Type '<X<#fdd>>' or '<X<#fdd>> <objectname<#fee>>' to examine clues";
       : if (is_carried "map") {
         : print "- Type '<MAP<#fdd>>' to display map (<current location<#afa>>, <accessible<#aaf>>, <inaccessible<#faa>>)";
       }
       : print "- Type <N<#fdd>>, <S<#fdd>>, <E<#fdd>>, <W<#fdd>>, <UP<#fdd>>, <DOWN<#fdd>>, <ENTER<#fdd>>, <EXIT<#fdd>> to move";
       : if (!has_food_fight && !is_exists "larry" && hard_mode) {
         : print "- Type '<PLAY LOGIC<#fdd>>' or '<REPLAY LOGIC<#fdd>>' to play/replay a pigeon logic puzzle with no rewards";
       }
       : if (is_at "church_inside") {
           : print "- Type '<RING<#fdd>> <number<#fee>>' to test a code on the apparatus";
       }
       : if (sysvar_bool "sysvar_sound_enabled") {
            : print "- Type '<SOUND OFF<#fdd>> | <LOWEST<#fdd>> | <LOW<#fdd>> | <NORMAL<#fdd>> | <HIGH<#fdd>> | <HIGHEST<#fdd>>' to disable sound or change volume";
       }
       : else {
            : print "- Type '<SOUND ON<#fdd>> | <LOWEST<#fdd>> | <LOW<#fdd>> | <NORMAL<#fdd>> | <HIGH<#fdd>> | <HIGHEST<#fdd>>' to enable sound or change volume";
       }
       : print "- Type '<TALK<#fdd>>' to talk to a person or pigeon";
       : if (!hard_mode && (is_at "bookshop" || is_at "church_inside")) {
           : print "- Type '<TRANSLATE<#fdd>>' to try to translate a person or pigeon speech";
       }
       : print "- Type '<LOAD<#fdd>>' or  '<SAVE<#fdd>>' to load or save a game";
       : print "- Type '<QUIT<#fdd>>' to restart a game";
   }

   : match "examine -"  {
      : if (is_at "bookshop") {
         : print "So many <books<#fee>>!" ;
      }
      : if (is_at "church") {
         : print "A <church<#fee>> in Norman style, the architecture is captivating." ;
      }
      : if (is_at "church_inside") {
         : print "You remember the ellacombe apparatus, and the place for important missions." ;
      }
      : if (is_at "church_tower") {
         : print "Some suggest this <tower<#fee>> is a special place to organize secret missions." ;
      }
      : if (is_at "coocoo_cafe") {
         : print "You see <pigeons<#fee>> eating and flying with colorful doggy <bags<#fee>>. It's like a very busy <restaurant<#fee>>." ;
      }
      : if (is_at "coocoo_inside") {
         : print "The interior of the <Coocoo<#fee>> <Cafe<#fee>> is very cosy." ;
      }
      : if (in_labyrinth) {
         : print "Find the shortest path to deliver all presents!" ;
      }
      : if (is_at "montauk_beach") {
         : print "<Montauk<#fee>> <Beach<#fee>> is popular this season of the year for winter surfing, and is known as a romantic <place<#fee>>." ;
      }
      : if (is_at "nicobar_park") {
         : print "The Nicobar Park is the ideal refuge from the noisy streets of the city." ;
      }
      : if (is_at "santa_cellar") {
         : print "You've never seen your <cellar<#fee>> so crowded, and your <barrels<#fee>> so empty." ;
      }
      : if (is_at "south_park") {
         : print "A quiet part of the park, in warmer months you can hear the water flowing from the <pigeon<#fee>> <fountain<#fee>>. There is a beautiful view on the <church<#fee>>." ;
      }
   }
   : match "examine tree; get tree; examine fir; get fir; examine pine; get pine"  {
      : if (is_at "bookshop" || is_at "church" || is_at "coocoo_cafe" || is_at "coocoo_inside" || is_at "nicobar_park" || is_at "south_park" || in_labyrinth) {
         : print "<Trees<#fee>> got dressed up for Christmas." ;
      }
   }
   : match "nothing -" {
      : print "{nothing_message}";
      : set_string var="nothing_message" text="";
   }
}

assets {
   sounds {
      music_delivery : sound_sample "https://okfeather.github.io/feathery_christmas/music_delivery.mp3" ;
      music_victory : sound_sample "https://okfeather.github.io/feathery_christmas/music_victory.mp3" ;
      music_labyrinth : sound_sample "https://okfeather.github.io/feathery_christmas/music_labyrinth.mp3" ;
      music_cellar : sound_sample "https://okfeather.github.io/feathery_christmas/music_cellar.mp3" ;
      music_church : sound_sample "https://okfeather.github.io/feathery_christmas/music_church.mp3";
      music_bookshop : sound_sample "https://okfeather.github.io/feathery_christmas/music_bookshop.mp3" ;
      music_beach : sound_sample "https://okfeather.github.io/feathery_christmas/music_beach.mp3" ;
      music_cafe : sound_sample "https://okfeather.github.io/feathery_christmas/music_cafe.mp3" ;
      music_bells: sound_sample "https://okfeather.github.io/feathery_christmas/music_bells.mp3";
      music_intro: sound_sample "https://okfeather.github.io/feathery_christmas/music_intro.mp3";
      music_calm1: sound_sample "https://okfeather.github.io/feathery_christmas/music_calm1.mp3";
      music_calm2: sound_sample "https://okfeather.github.io/feathery_christmas/music_calm2.mp3";
   }
   graphics {
      labyrinth : base64_png "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" {
            : if (is_at "labyrinth_win") {
               : overlay "labyrinth_pigeon_win";
            }
            : else {
              : overlay {
                  graphic -> ("labyrinth_pigeon")
                  x       -> ( labyrinth_position_x )
                  y       -> ( labyrinth_position_y )
               }
            }
         };
      labyrinth_pigeon_win : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAABQCAMAAADBVVsXAAAABGdBTUEAALGPC/xhBQAAAAFzUkdCAK7OHOkAAAEUUExURUdwTDYsLKSdmIWAiS8lJjEmJzUrLAAAAF1PTywhI3x4gHt3f6ymtWlkb0iHZVxVX2tmcca9s049R2plbjgqLGrvt5eQjKSerKqks6hitUI1Nli9j6egmu7j43lsaaWemUw+PWljcGhicWpjc2tkc66foWlkbn15gaaemaafmnx3f0o9PmpjcnJnZWhicDEmJ2licnt3fjQpKqKcqV1WX721rGhjbj4yM2xmdGtkdGlicXt3gFhNTFxQT1ZJSMi9tTMrLKOYkkpJT3x4gaqksqmls19aYIJ4d3x5gH56goB7hG9CdlWhgFtTXVRVWGFaZF9WYFk0WUQ1PmReaWDMn3p4foF+hX17gWHSo69ywkJWSlI7VMbd9+0AAAAKdFJOUwD////77v4F9fY7RCk/AAACLUlEQVR42u3Y13LiQBCFYfVo4ygPAiERnO315pxzztGb3/89tnskML7ae/X5qYIq7vqjRwiCACGEEEIIIYQQQgihvhb6FM8fx+PxWK8Az88Cz5lAM4AsgV4AovgFP4WkaGoiOlwABoiVARAdXwj4E7Azm/H3gCaAE/S4Ewjj6hrNZrMdTQB8AKgoHsrAYVVVIT19ySdAF8ATUzwoaAEgqQI4bYyZPyr4FFBayeknGoQprSxIzwGMuXXfmIIFKE0ZYMAtAIguKQC4cJV3wBSvyKUiIAC7HoCoLI81Td8BTp0zHqBggGGayvyDtAUop9Oy7P0GkIy/xgLk/gxZoO0jXxKKohXQAHBmTQDc0AtMJpP68yee/0Y5n6/3HSDwAGbfGIrc35oJZP6v3/juwJhp08z7D9AKMMCbH87Vw18H7+sv7oPMzzXr/b8jWAI8e/vTud91Xb9ztntz1PsvgcMdIGujve/OZzuA0Yg03BKe9Pd7NrLca3na6wCUzM/lYWSjNnvPQ5CMr2Z+AWCBzkDmTxL/o0jNTyIPwNeAs1Zer9jbyUVN/4kJQOg/ev/pW7stC6ALIE86Au7OJs+faAPIk43NfHtr6/zluxs8/66u+flql1Ny5KEKgLJMBHK6uXRQtgCZCLQGuTfQNX+7AhmtFGiLKLtOnkEcAn0A/sdA5gEy/2dYoJNguf4Kz8GReTWOT/99p9fzy0PjuV8RQAghhBBCCCGEEEIIIYQQ8v0D7z4mRVTLWEQAAAAASUVORK5CYII=";
      room_tree : base64_png "";
      santa_cellar : base64_png "";
      church_tower_pigeons : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAABQCAMAAADBVVsXAAAABGdBTUEAALGPC/xhBQAAAAFzUkdCAK7OHOkAAAB4UExURUdwTCouLCRBO7u2s1VdYjw9PgkOEaulpDc7PNzg3zE0M2hLSKyrqj8+QExDPpiWlkFGTjYyLhobG2BWTmJCPcLAvhkbG1RZXldcXytGPytAQBagvYuPjkZCPj47NzItKHhzboCGht3e3RkdITk+Q1heXEJDR62nobJ3aowAAAAKdFJOUwD///////8Uq3aRjYjDAAADTElEQVR42u1biZKbMAwFLLst2FxJ2CNtt3f//w8rGWfbQAjezqBkxnq7O5mF0fUsGccyWXbXaBqXJY2md0kz0PcAaTMARVGkzICrkYCUc8DWCKyCdAlAQNIEgEe6BDgff53wLFhVDn+dS3w5hKmgEydAO0kAgUAgEAgEAoFAIBAIBAKB4A04Ho9Jx6+1PiYdvrVWJxz+b2t3O53y6O8wfp1w/BbDZ82A2cEea8984iSA4sfweSugb/opAa8MaADLHD//DNAMbuZHGHetwVruAtgxE/DLFe7nLAXQmRC/ZarDMQFo/uOdAQGeiuL5MM0BcsYXAA8BzQDgPn/ZdfjDXACKDjY9HA6ztRjCx79jcGIYGiic+4TxI3jjV1DX9YyArAkEcI1HUxR1DS9dx70EQgIQWh+WU5LHEVvU5Anz+I8TPTxOCRgGOusUUpLJkfGEVac/3oCACxMvf0r6E3bg2BfBWleVnpXALVLSuqqqHPdTMKOjXRfiv0VKOlc5JKDjZ+Ai67dJSec6/hTIftCDYDEleSuSFgIdOwP6Yg6ElMy4GcAq4Cbg++LUgynJPRbsi0HCtysDwp+NX+9qk4Z/NN5/uCsCuCekd9mdQY69CgQCgYDnmxDtDSPyPB83JcL/N7P7hpfBm5mOCNGpwVOLRvXj9b7tNw181e6sZ7SMk0zeq3jRqUE3eIeMyXNDt9u+3ZSAVbuzntEyUIYiJxUmVnRiEMAVTtEnvYFs8DJ+qi0pWLOr8AZAlCaFMsiA8TogTnRiEOC5KJ6AdqmxNHKjfMdCqQ0JWLGrfM8oigFFBNRKGVKBmqJEJwbh8OCVjJfxekuvYqstU2DFbugZQUwCKBJqRwKQgSjRqcHDg3/3PPBiVFn6Xckta+CqXaTE94wivg62XqIslTmlQBBdJ+Afg7RBjzCohP7wur+zJQFX7fqWEUTtUrc+fCQgD1pOomtz4JlBrR9JyAT46yWUmz4HrtlVoWcUsyFQ+vgpA0acRFcIODM4NiPJj2y/3+PTYdRZwpYEXLOrFnpGl3h8ddWgDoosRnRqUI89GryDOggVYds14FW7oWcUpeivr15JpOgFg2c6s63jP216LdkNxMQxkE20/LeoQCAQCAQL+AN3tzGQkyXZ0gAAAABJRU5ErkJggg==";
      church_tower : base64_png "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" {
          : if (is_exists "gang_pigeon") {
              : overlay "church_tower_pigeons" ;
          }
      }
      delivery : base64_png "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";
      labyrinth_pigeon : base64_png "iVBORw0KGgoAAAANSUhEUgAAABUAAAAWCAMAAAAYXScKAAABcVBMVEVHcExpZG8AAAA+NDNkX2p2cX5qZXDs8PA2LCxkX2qfj5FBNzY2LCw4Li62qb05LzA4Ly03LCzEu7FqZXBoX11/fIQ1KyuZmKM3i2Y7MDArJSeYW6FVTlA0Kiqmn5qim5aWk6CknZijnJe5sbLcz85COTpBNztaU14/NTdFOz9lYGpMQ0lpZG1cVVsvJCNANzoyKCg2LCySi4uRiYU6MC9eVVM5Ly+MhH+QiYShmpVXTk0sIiKQiISpop1fVlUzKSp/d3M1LCs2LSyBenViWlgyKShpYF5FOztXUFmyqqNdVFJRSlE2LC2FfnqNhoKrpJ+ooZxUSkpzbndgWWNVTlagmZVpZG8+Oj1BODhXUFIxJSU/NDWgmZREPD3GvbRYTFSlnpmdl6RaSFA0nXJymYtOsIVaT1VjpIk7km9ay5lWr4g4LC2qo51i77NDOj54b2tNqYNdtpFhWFZwy6dVvo5FOjp7u6ROTE+ln5luxKE5Li5ArRyfAAAADXRSTlMA4ATsBLSpAeyUBvTiy7qu5gAAAQBJREFUGNNd0WVXwzAUgOGLa4jVtnY+ZLg7DJcNZ7i7u/PrCR10ad+TD7nPyblfAiCXx9c5eCosrhJ5uUwYQhzKXVokdA/FY5AvYTgs9EiPx7bkp1ygruvcv+GX1Xh/+bo4Pd52o2HcXb2eXUqmKAUV5P7j+unxRELG2P7D241pmjsunF07vH3G5wfIQcJYXygSiX5Wq6qjpL1zeCi4GIzuSkpI//joRM/0/FJoU13J6UDv4FiXMrmwnFnNYsmvat0dI61Tqbn0jLMVcKBNSwaQCOewsam5BWulyO4f62sbMMaauFH7ZKtJ1GFsT5SCRX0+91dYFFH67UGwACr/NvwAdFklPiL8oskAAAAASUVORK5CYII=";
      church_inside : base64_png "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";
      larry : base64_png "";
      bookshop : base64_png "";
      south_park : base64_png "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";
      nicobar_park : base64_png "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";
      coocoo_cafe : base64_png "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";
      coocoo_inside : base64_png "";
      montauk_beach : base64_png "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" {
          : if (is_exists "larry" || is_exists "morehelping_larry") {
              : overlay "larry" ;
          }
      }
      loading_screen : base64_png "";
      church : base64_png "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";
   }
}
